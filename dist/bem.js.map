{"version":3,"sources":["bem.js"],"names":[],"mappings":"wtBAeM,6HAQgB,MAAO,QAAS,SAAU,CACxC,GAAM,cAAe,IAAI,eAAJ,CAAoB,KAApB,CAA2B,OAA3B,CAAoC,QAApC,CAArB,CACA,MAAO,UAAS,aAAT,CAAuB,QAAvB,CAAP,CACH,yDAUsB,MAAO,QAAS,SAAU,CAC7C,GAAI,WAAY,KAAhB,CAEA,GAAI,OAAJ,CAAa,CACT,gBAAkB,OAAlB,CACH,CAED,GAAI,QAAJ,CAAc,CACV,gBAAkB,QAAlB,CACH,CAED,MAAO,UAAP,CACH,iDAWkB,KAAM,SAAU,CAC/B,GAAM,YAAa,KAAK,SAAL,CAAe,KAAf,CAAqB,GAArB,CAAnB,CACA,GAAI,oBAAqB,EAAzB,CAEA,IAAK,GAAM,EAAX,GAAgB,WAAhB,CAA4B,CACxB,GAAM,WAAY,WAAW,CAAX,CAAlB,CAAiC,kBAAuB,SAAvB,MAAqC,QAAtE,CAGA,GAAI,UAAU,KAAV,CAAgB,IAAhB,CAAJ,CAA2B,CACvB,SACH,CAGD,GAAI,KAAK,SAAL,CAAe,KAAf,CAAqB,iBAArB,CAAJ,CAA6C,CACzC,SACH,CAED,oBAAyB,SAAzB,MAAuC,QAAvC,KACH,CAED,KAAK,SAAL,CAAiB,CAAG,KAAK,SAAL,CAAe,IAAf,EAAH,KAA4B,kBAA5B,EAAiD,IAAjD,EAAjB,CACH,uDAQqB,KAAM,SAAU,CAClC,GAAM,OAAQ,GAAI,OAAJ,eAAyB,QAAzB,QAAyC,GAAzC,CAAd,CACA,KAAK,SAAL,CAAiB,KAAK,SAAL,CAAe,OAAf,CAAuB,KAAvB,CAA8B,EAA9B,EAAkC,IAAlC,EAAjB,CACH,uDASqB,KAAM,SAAU,CAClC,GAAI,IAAI,WAAJ,CAAgB,IAAhB,CAAsB,QAAtB,CAAJ,CAAqC,CACjC,IAAI,cAAJ,CAAmB,IAAnB,CAAyB,QAAzB,EACA,OACH,CACD,IAAI,WAAJ,CAAgB,IAAhB,CAAsB,QAAtB,EACH,iDASkB,KAAM,SAAU,CAC/B,GAAM,OAAQ,GAAI,OAAJ,MAAgB,QAAhB,aAAqC,GAArC,CAAd,CACA,MAAO,MAAK,SAAL,CAAe,KAAf,CAAqB,KAArB,CAAP,CACH,oCAIU,YACN,IAAA","file":"bem.js","sourcesContent":["/**\n * This module provides BEM (Block Element Modifier) related helper methods\n * These helper methods can be used as an abstraction to talk to the DOM\n * BEM is a CSS methodology separating blocks (block) from elements (__element) and modifiers (--modifier)\n * BEM examples: alert, alert--warning, form__button, form__button-disabled\n * @see https://en.bem.info/methodology/key-concepts/\n * @module\n */\n\n\n /**\n  * BEM class\n  * Contains static methods with BEM abstraction to DOM manipulation\n  * @class\n  */\nclass BEM {\n    /**\n     * Helper method to get a node by BEM (Block Element Modifier) description\n     * @param {String} block The outer block of component\n     * @param {String} [element] An optional element within the outer block\n     * @param {String} [modifier] An optional modifier or (e.g. state or theme) for a block/element\n     * @returns {HTMLElement}\n     */\n    static getBEMNode(block, element, modifier) {\n        const selector = `.${BEM.getBEMClassName(block, element, modifier)}`;\n        return document.querySelector(selector);\n    }\n\n\n    /**\n     * Helper method to get a BEM (Block Element Modifier) class name\n     * @param {String} block The outer block of component\n     * @param {String} [element] An optional element within the outer block\n     * @param {String} [modifier] An optional modifier or (e.g. state or theme) for a block/element\n     * @returns {String}\n     */\n    static getBEMClassName(block, element, modifier) {\n        let className = block;\n\n        if (element) {\n            className += `__${element}`;\n        }\n\n        if (modifier) {\n            className += `--${modifier}`;\n        }\n\n        return className;\n    }\n\n\n    /**\n     * Helper method to add an additional class name with a specific modifier (--modifier) to a BEM (Block Element Modifier) element\n     * A modifier class is created for each of the existing class names\n     * Class names containing \"--\" (modifier pattern) are discarded\n     * Double class names are prevented\n     * @param {HTMLElement} node The block/element to append the class name to (block, block__element)\n     * @param {String} modifier The name of the modifier (--name)\n     */\n    static addModifier(node, modifier) {\n        const classNames = node.className.split(' ');\n        let modifierClassNames = '';\n\n        for (const i in classNames) {\n            const className = classNames[i], modifierClassName = `${className}--${modifier}`;\n\n            // Discard class names containing \"--\" (modifier pattern)\n            if (className.match('--')) {\n                continue;\n            }\n\n            // Prevent double class names\n            if (node.className.match(modifierClassName)) {\n                continue;\n            }\n\n            modifierClassNames += `${className}--${modifier} `;\n        }\n\n        node.className = `${node.className.trim()} ${modifierClassNames}`.trim();\n    }\n\n\n    /**\n     * Helper method to remove all class names with a specific modifier (--modifier) from a BEM (Block Element Modifier) element\n     * @param {HTMLElement} node The block/element to remove the class names from (block, block__element)\n     * @param {String} modifier The name of the modifier (--name)\n     */\n    static removeModifier(node, modifier) {\n        const regex = new RegExp(`[^^\\\\s]+?--${modifier}\\\\s?`, 'g');  // Regex matching all class names containing \"--\" + modifier\n        node.className = node.className.replace(regex, '').trim();\n    }\n\n\n    /**\n     * Toggles between addModifier() and removeModifier() based on the presence of modifier (--modifier)\n     * Block/element names are NOT taken into account while matching\n     * @param {HTMLElement} node The block/element to remove the class names from (block, block__element)\n     * @param {String} modifier The name of the modifier (--name)\n     */\n    static toggleModifier(node, modifier) {\n        if (BEM.hasModifier(node, modifier)) {\n            BEM.removeModifier(node, modifier);\n            return;\n        }\n        BEM.addModifier(node, modifier);\n    }\n\n\n    /**\n     * Returns whether node has modifier (--modifier)\n     * Block/element names are NOT taken into account while matching\n     * @param {HTMLElement} node The block/element to check\n     * @param {String} modifier The name of the modifier (--name)\n     */\n    static hasModifier(node, modifier) {\n        const regex = new RegExp(`--${modifier}(?=\\\\s|$)`, 'g');  // Regex matching specific modifier\n        return node.className.match(regex);\n    }\n}\n\n\nexport default BEM;\nexport { BEM };\n"]}